import React, { useState, useEffect } from "react";
import type { Menu } from "@/Types/Restaurante.ts";
import type { Variante } from "@/Types/Restaurante.ts";

interface MenuModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (item: Menu) => void;
  initialData?: Menu;
}

const initialForm: Menu = {
  id: "",
  name: "",
  ingredientes: "",
  price: 0,
  categoria: "Todas",
  imagen: "",
  variantes: [],
};

const MenuModal: React.FC<MenuModalProps> = ({
  isOpen,
  onClose,
  onSave,
  initialData,
}) => {
  const [form, setForm] = useState<Menu>(initialForm);
  const [savedData, setSavedData] = useState<Menu | null>(null); // ðŸ”¹ para mostrar JSON guardado

  useEffect(() => {
    if (initialData) {
      setForm(initialData);
    } else {
      setForm(initialForm);
    }
  }, [initialData, isOpen]);

  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    const { name, value, files } = e.target as any;
    if (files) {
      const reader = new FileReader();
      reader.onload = () =>
        setForm({ ...form, imagen: reader.result as string });
      reader.readAsDataURL(files[0]);
    } else {
      setForm({
        ...form,
        [name]: name === "price" ? parseFloat(value) : value,
      });
    }
  };

  const handleAddVariante = () => {
    const nuevaVariante: Variante = {
      id: `var-${Date.now()}`,
      name: "Nueva Variante",
      obligatorio: false,
      maxSeleccion: 1,
      opciones: [{ nombre: "OpciÃ³n 1", precio: 0 }],
    };
    setForm({ ...form, variantes: [...(form.variantes || []), nuevaVariante] });
  };

  const handleVarianteChange = (
    index: number,
    key: keyof Variante,
    value: any
  ) => {
    const updated = [...(form.variantes || [])];
    (updated[index] as any)[key] = value;
    setForm({ ...form, variantes: updated });
  };

  const handleAddOpcion = (varianteIndex: number) => {
    const updated = [...(form.variantes || [])];
    updated[varianteIndex].opciones.push({ nombre: "Nueva OpciÃ³n", precio: 0 });
    setForm({ ...form, variantes: updated });
  };

  const handleOpcionChange = (
    varianteIndex: number,
    opcionIndex: number,
    key: "nombre" | "precio",
    value: any
  ) => {
    const updated = [...(form.variantes || [])];
    (updated[varianteIndex].opciones[opcionIndex] as any)[key] =
      key === "precio" ? parseFloat(value) : value;
    setForm({ ...form, variantes: updated });
  };

  const handleClose = () => {
    setForm(initialForm); // ðŸ”¹ reset form
    setSavedData(null); // ðŸ”¹ limpiar JSON guardado
    onClose();
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const data = { ...form, id: initialData?.id || Date.now().toString() };

    onSave(data);
    setSavedData(data); // ðŸ”¹ mostrar JSON guardado
    setForm(initialForm); // ðŸ”¹ limpiar form
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50 overflow-y-auto">
      <div className="bg-white rounded-lg shadow-lg w-full max-w-lg p-6 transform transition-all scale-100 opacity-100">
        <div className="flex justify-between items-center border-b pb-3 mb-4">
          <h2 className="text-lg font-semibold text-gray-800">
            {initialData ? "Editar Plato" : "Agregar Plato"}
          </h2>
          <button
            onClick={handleClose}
            className="text-gray-500 hover:text-gray-800"
          >
            âœ•
          </button>
        </div>

        {/* ðŸ”¹ Formulario */}
        <form className="space-y-4" onSubmit={handleSubmit}>
          {/* Nombre */}
          <div>
            <label className="block text-sm font-medium text-gray-700">
              Nombre
            </label>
            <input
              name="name"
              type="text"
              value={form.name}
              onChange={handleChange}
              className="mt-1 block w-full border rounded-md p-2 text-sm"
            />
          </div>

          {/* Ingredientes */}
          <div>
            <label className="block text-sm font-medium text-gray-700">
              Ingredientes
            </label>
            <textarea
              name="ingredientes"
              value={form.ingredientes}
              onChange={handleChange}
              className="mt-1 block w-full border rounded-md p-2 text-sm"
            />
          </div>

          {/* Precio */}
          <div>
            <label className="block text-sm font-medium text-gray-700">
              Precio
            </label>
            <input
              name="price"
              type="number"
              step="0.01"
              value={form.price}
              onChange={handleChange}
              className="mt-1 block w-full border rounded-md p-2 text-sm"
            />
          </div>

          {/* CategorÃ­a */}
          <div>
            <label className="block text-sm font-medium text-gray-700">
              CategorÃ­a
            </label>
            <input
              name="categoria"
              type="text"
              value={form.categoria}
              onChange={handleChange}
              className="mt-1 block w-full border rounded-md p-2 text-sm"
            />
          </div>

          {/* Imagen */}
          <div>
            <label className="block text-sm font-medium text-gray-700">
              Imagen
            </label>
            <input
              name="imagen"
              type="file"
              onChange={handleChange}
              className="mt-1 block w-full border rounded-md p-2 text-sm"
            />
            {form.imagen && (
              <img
                src={form.imagen}
                alt="preview"
                className="mt-2 h-16 w-16 object-cover rounded-md"
              />
            )}
          </div>

          {/* Variantes */}
          <div>
            <div className="flex justify-between items-center">
              <label className="block text-sm font-medium text-gray-700">
                Variantes (Opcional)
              </label>
              <button
                type="button"
                onClick={handleAddVariante}
                className="text-xs px-2 py-1 bg-orange-500 text-white rounded-md"
              >
                + Agregar Variante
              </button>
            </div>
            {form.variantes?.map((v, index) => (
              <div key={v.id} className="border p-2 mt-2 rounded-md">
                <input
                  type="text"
                  value={v.name}
                  onChange={(e) =>
                    handleVarianteChange(index, "name", e.target.value)
                  }
                  className="w-full border rounded-md p-1 text-sm mb-2"
                  placeholder="Nombre de la variante"
                />

                <label className="flex items-center text-xs gap-2">
                  <input
                    type="checkbox"
                    checked={v.obligatorio}
                    onChange={(e) =>
                      handleVarianteChange(index, "obligatorio", e.target.checked)
                    }
                  />
                  Obligatorio
                </label>

                <div className="mt-2">
                  <label className="text-xs text-gray-600">MÃ¡x. selecciÃ³n</label>
                  <input
                    type="number"
                    value={v.maxSeleccion}
                    onChange={(e) =>
                      handleVarianteChange(
                        index,
                        "maxSeleccion",
                        parseInt(e.target.value)
                      )
                    }
                    className="mt-1 block w-20 border rounded-md p-1 text-sm"
                  />
                </div>

                {/* Opciones */}
                <div className="mt-3">
                  <div className="flex justify-between items-center">
                    <span className="text-xs font-medium">Opciones</span>
                    <button
                      type="button"
                      onClick={() => handleAddOpcion(index)}
                      className="text-xs px-2 py-1 bg-blue-500 text-white rounded-md"
                    >
                      + Agregar OpciÃ³n
                    </button>
                  </div>
                  {v.opciones.map((op, opIndex) => (
                    <div key={opIndex} className="flex gap-2 mt-2">
                      <input
                        type="text"
                        value={op.nombre}
                        onChange={(e) =>
                          handleOpcionChange(index, opIndex, "nombre", e.target.value)
                        }
                        className="flex-1 border rounded-md p-1 text-sm"
                        placeholder="Nombre"
                      />
                      <input
                        type="number"
                        value={op.precio}
                        onChange={(e) =>
                          handleOpcionChange(index, opIndex, "precio", e.target.value)
                        }
                        className="w-24 border rounded-md p-1 text-sm"
                        placeholder="Precio"
                      />
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>

          {/* Botones */}
          <div className="flex justify-end gap-3 mt-6">
            <button
              type="button"
              onClick={handleClose}
              className="px-4 py-2 text-sm text-gray-600 hover:text-gray-800"
            >
              Cancelar
            </button>
            <button
              type="submit"
              className="px-4 py-2 text-sm text-white bg-orange-600 rounded-md hover:bg-orange-700"
            >
              Guardar
            </button>
          </div>
        </form>

        {/* ðŸ”¹ JSON mostrado dentro del modal */}
        {savedData && (
          <div className="mt-6 p-4 border rounded bg-gray-100 relative">
            <button
              onClick={() => setSavedData(null)}
              className="absolute top-2 right-2 text-red-600 font-bold"
            >
              âœ•
            </button>
            <h3 className="font-semibold mb-2 text-gray-700">Guardado:</h3>
            <pre className="text-xs bg-white p-2 rounded border max-h-60 overflow-y-auto">
              {JSON.stringify(savedData, null, 2)}
            </pre>
          </div>
        )}
      </div>
    </div>
  );
};

export default MenuModal;
